Задание 7.2 _________________________________________________

try:
    from Root.src.hidden import mystery
except ImportError:
    from hidden import mystery

   
# В переменную elem_5_3 сохраните элемент из 5 строки и 3 столбца:
elem_5_3 = mystery[4,2]

# В переменную last сохраните элемент из последней строки последнего столбца
last = mystery[-1,-1]

# В переменную line_4 сохраните строку 4
line_4 = mystery[3,:]

# В переменную col_2 сохраните предпоследний столбец
col_2 = mystery[:,-2]

# Из строк 2-4 (включительно) получите столбцы 3-5 (включительно)
# Результат сохраните в переменную part
part = mystery[1:4,2:5]

#  Сохраните в переменную rev последний столбец в обратном порядке
rev = mystery[:,-1][::-1]

# Сохраните в переменную trans транспонированный массив
trans = mystery.transpose()

___________________________________________________________
from hidden import mystery
# Пишите здесь команды, который помогут
# найти ответы на вопросы
print(mystery.ndim)
print(mystery.shape)
print(mystery.size)
print(mystery.dtype)
print(mystery.itemsize*mystery.size)
_________________________________________________________
tasks = [(36871, 'office', False),
(40690, 'office', False),
(35364, 'voltage', False),
(41667, 'voltage', True),
(33850, 'office', False)]

from collections import deque
from collections import defaultdict

final_dict = defaultdict(deque)
server_deque = deque()

def task_manager(tasks):
    for task in tasks:
        if task[2] == False:
            final_dict[task[1]].append(task[0])
        elif task[2] == True:
            final_dict[task[1]].appendleft(task[0])
            
    sorted(final_dict.items())        
    return final_dict


print(task_manager(tasks))


# defaultdict(, {'voltage': deque([41667, 35364]),'office': deque([36871, 40690, 33850])})
# defaultdict(, {'voltage': deque([41667, 35364]), 'office': deque([36871, 40690, 33850])})

Задание 4.9 ___________________________________________

ratings = [('Old York', 3.3), ('New Age', 4.6), ('Old Gold', 3.3), ('General Foods', 4.8),
           ('Belissimo', 4.5), ('CakeAndCoffee', 4.2), ('CakeOClock', 4.2), ('CakeTime', 4.1),
           ('WokToWork', 4.9), ('WokAndRice', 4.9), ('Old Wine Cellar', 3.3), ('Nice Cakes', 3.9)]
         
# Отсортируйте список ratings по убыванию рейтинга. Для кафе
# с одинаковым рейтингом отсортируйте кортежи по названию.


# Сохраните данные с рейтингом в словарь cafes, где ключами являются
# названия кафе, а значениями - их рейтинг.
cafes = None

from collections import OrderedDict
cafe_ratings = []


ratings = sorted(ratings, key=lambda x: (x[1]*(-1), x[0].lower()) )


print(ratings)

cafes = OrderedDict(ratings)
    

print(cafes)

Заданий 4.4-4.8  ______________________________________

from hidden import north, center, south
# Пишите здесь команды, которые помогут
# найти ответы на вопросы

from collections import Counter


north_counter_all = Counter()
north_dict_all = []

center_counter_all = Counter()
center_dict_all = []

south_counter_all = Counter()
south_dict_all = []

for bill in north:
    north_dict_all += bill
    
for bill in center:
    center_dict_all += bill
    
for bill in south:
    south_dict_all += bill
    
north_counter_bill = Counter(north_dict_all)
center_counter_bill = Counter(center_dict_all)
south_counter_bill = Counter(south_dict_all)

    

print("north ",north_counter_bill,sum(north_counter_bill.values()))
print("center ",center_counter_bill,sum(center_counter_bill.values()))
print("south ",south_counter_bill,sum(south_counter_bill.values()))

print(list(reversed(north_counter_bill.most_common()))[0][1])

rare_center_counter_bill = center_counter_bill-north_counter_bill-south_counter_bill
print("rare_center_counter_bill ",rare_center_counter_bill)

rare_north_counter_bill = north_counter_bill-center_counter_bill-south_counter_bill
print("rare_north_counter_bill ",rare_north_counter_bill)

rare_south_counter_bill = south_counter_bill-center_counter_bill-north_counter_bill
print("rare_south_counter_bill ",rare_south_counter_bill)

all_counter_bill = north_counter_bill + center_counter_bill + south_counter_bill
print("all_counter_bill ",all_counter_bill)

print("all_counter_bill ",all_counter_bill.most_common()[1])

Задание 4.3 __________________________

from collections import deque

def brackets(line):
    deq = deque()
    
    for simbol in line:
        if simbol == "(":
            deq.append(simbol)
        elif simbol == ")":
            if len(deq) == 0:
                return False
            deq.pop()
    
    if len(deq) == 0: 
        return True
    else:
        return False
    
    
    print(deque)

print(brackets("(()())"))
# True
print(brackets(""))
# True
print(brackets("(()()))"))
# False


9.3.5-9.3.7 _________________________

from hidden import users
# Пишите здесь команды, который помогут
# найти ответы на вопросы

from collections import deque

deq = deque(users)
print(deq)
first=deq.popleft()
print(first)
print(deq)
deq.rotate(-5)
print(deq)
last = deq.pop()
print(deq)
count = deq.count(last)
print(count)

Задание 3.2 _________________________

temps = [('2000', -4.4), ('2001', -2.5), ('2002', -4.4), ('2003', -9.5),
        ('2004', -8.2), ('2005', -1.6), ('2006', -5.9), ('2007', -2.4),
        ('2008', -1.7), ('2009', -3.5), ('2010', -12.1), ('2011', -5.8),
        ('2012', -4.9), ('2013', -6.1), ('2014', -6.9), ('2015', -2.7),
        ('2016', -11.2), ('2017', -3.9), ('2018', -2.9), ('2019', -6.5),
        ('2020', 1.5)]

from collections import OrderedDict

ordered_temps = OrderedDict(sorted(temps, key=lambda x: -1*x[1]))
print(ordered_temps)

9.2.3-9.2.5 __________________________

from hidden import clients
from collections import Counter


#print(clients)

c = Counter(clients)

print(c.most_common(1))
print(c[953421102])
print(len(c))


Задание 6.4.7 _______НЕ ЗАКОНЧТИЛ
matrix_example = [
          [1, 5, 4],
          [4, 2, -2],
          [7, 65, 88]
]

def matrix_sum(matrix1, matrix2):
    if (len(matrix1)==len(matrix2)) and (len(matrix1[1])==len(matrix2[1])):
        sum_matrix=[1, 5, 4]
        for i in range(len(matrix1)):
            str_matrix=list()
            for j in range(len(matrix1[1])):
                str_matrix[j] = matrix1[i][j]+matrix2[i][j]
                print(matrix1[i][j],matrix2[i][j])
                print(i)
            sum_matrix[i] =  str_matrix
            print(str_matrix)
            return sum_matrix
    else:
        print('Error! Matrices dimensions are different!')
        return None

print(matrix_sum(matrix_example, matrix_example))


Задание 6.4.6 ___________________________________________________

matrix_example = [
          [1, 5, 4],
          [4, 2, -2],
          [7, 65, 88]
]

def even_numbers_in_matrix(matrix):
    sum = 0
    for i in range(len(matrix)):
        for j in range(len(matrix[i])):
            if matrix[i][j]%2 == 0:
                sum += 1
    return sum

print(even_numbers_in_matrix(matrix_example))


Задание 6.4.5______________________________________________

def fib_number(n):
    fib = 0
    sum = 0
    if n > 1:
        s0=1
        s1=1
        for i in range(1,n-1):
            
            sum = s0 + s1
            s0  = s1
            s1  = sum
            print(i,'-',sum)
    elif n == 1:
        sum = 1
            
    return sum


Задание 6.2.5_____________________________________________

def get_unique_words(text):
    for i in punctuation_list:
        text=text.replace(i, '').lower()

    text=text.split(' ')

    text=list(set(text))

    text.sort()

    return text



Итератор_____________________________________

def my_group_gen(n):
    while True:
       for i in range(1, n+1):
           yield i


7.3__________________________________________
def logger(name):
    def root_decorator(func):
        
        def decorated_func(*args, **kwargs):
            
            print(name+":","Function",func.__name__,"started")
            result = func(*args, **kwargs)
            print(name+":","Function",func.__name__,"finished")
            return result
        
        return decorated_func
        
    return root_decorator


@logger('MainLogger')
def root(val, n=2):
    res = val ** (1/n)
    return res


    
print(root(25))
# MainLogger: Function root started
# MainLogger: Function root finished
# 5.0


6.4__________________________________________
def group_gen(n=3):
    while True:
        for i in range(1, n+1):
            yield i

def print_groups(users):
    n = len(users)
    g = group_gen()
    for n1, n2 in zip(users, g):
        print(n1 ,'in group', n2)

users = ['Smith J.', 'Petrova M.', 'Lubimov M.', 'Holov J.']
print_groups(users)



6.3__________________________________________
reg = [('Ivanov', 'Sergej', 24, 9, 1995),
      ('Smith', 'John', 13, 2, 2003),
      ('Petrova', 'Maria', 13, 3, 2003)]

def year2000(year):
    return year>2000
    
def str_fi(list):
    str_new = list[0]+' '+list[1][0].upper()+'.'
    return str_new


#ваш код здесь
new_reg1 = list(filter(lambda x: year2000(x[4]), reg))
print(new_reg1)

new_reg = list(map(lambda x: (str_fi(x),x[2], x[3], x[4]), new_reg1))
print(new_reg)


6.2__________________________________________
def family(*my_list):
    family_list = [
    'certificate of a large family',
    'social card',
    'maternity capital',
    'parking permit',
    'tax benefit',
    'reimbursement of expenses',
    "compensation for the purchase of children's goods"
    ]
    new_list = list(filter(lambda x: x in family_list , my_list))
    print(new_list)
    return new_list


#вызов функции
print(family(
    'newborn registration',
    'parking permit',
    'maternity capital',
    'tax benefit',
    'medical policy'
    )
)
6.1 _______________________________
links = list(map(lambda x: "https://www.kommersant.ru"+x,docs))
_______________________________
def check_string(s):
    if len(s) < 1:
        return True
    if s[0] == s[-1]:
        return check_string(s[1:-1])
    else:
        return False
Проверяет строку на палиндромность
----------------------------------
def multiply_lst(lst):
    if len(lst) == 0:return 1

    return lst[0] * multiply_lst(lst[1:])

my_lst = [10, 21, 24, 12]
print(multiply_lst(my_lst))
--------------------------------------
def saver():
    sum1 = 0
    def adder(x):
        nonlocal sum1
        sum1 += x 
        return sum1      
    return adder

pig = saver()
print(pig(25))
print(pig(100))
print(pig(19))
--------------------------------------
def get_time(distance, speed):
    if distance < 0 or speed < 0:
        raise ValueError('Distance or speed cannot be below 0!')
    if speed == 0:
        raise ValueError('Speed cannot be equal to 0!')
    result = distance / speed
    return result

# Создадим тот же словарь
grades = {'Ivanov': 5, 'Smirnov': 3, 'Kuznetsova': 4, 'Tihonova': 5}
# Только попробуем (try — пробовать) напечатать оценку студента,
# которого нет в словаре
try:
    print(grades['Pavlov'])
# А если возникнет ошибка в ключе (KeyError), скажем,
# что студента нет в словаре
except KeyError:
    print("Student’s mark was not found!")
# Будет напечатано:
# Student’s mark was not found!

print("Shopping list:", end=' ')
# Достаточно добавить параметр sep=', '
print("bread", "butter", "eggs", sep=', ')
# Будет напечатано:
# Shopping list: bread, butter, eggs

hyp = lambda a, b: (a**2 + b**2) ** (1/2)

def sort_sides(l_in):
    l_in.sort(key=lambda x: (x[0]**2 + x[1]**2) ** (1/2))
    return l_in

def between_min_max(*nums):
    mn = min(nums)
    mx = max(nums)
    return (mn + mx) / 2

is_palindrom = lambda x: 'yes' if x == x[::-1] else 'no'

def sort_ignore_case(ls):
    ls.sort(key=lambda x: x.lower())
    return ls

def exchange(usd=None, rub=None, rate=None):
    if usd is not None and rub is not None and rate is not None:
        raise ValueError('Too many arguments')
    not_enough_error = ValueError('Not enough arguments')
    if usd is not None:
        if rub is not None:
            return rub / usd
        if rate is not None:
            return usd * rate
    if rub is not None:
        if rate is not None:
            return rub / rate
    raise not_enough_error


